version: '3.8'

services:
  # React Firebase Application - Staging
  app:
    image: react-firebase-app:${IMAGE_TAG:-latest}
    container_name: react-firebase-app-staging
    ports:
      - "3001:80"  # Different port for staging
    environment:
      - NODE_ENV=staging
      - REACT_APP_FIREBASE_API_KEY=AIzaSyAOFBYofKi4BBBFgNrbOY-MekVm6a7vk7Y
      - REACT_APP_FIREBASE_AUTH_DOMAIN=fullstack-2e14f.firebaseapp.com
      - REACT_APP_FIREBASE_PROJECT_ID=fullstack-2e14f
      - REACT_APP_FIREBASE_STORAGE_BUCKET=fullstack-2e14f.firebasestorage.app
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=438764839401
      - REACT_APP_FIREBASE_APP_ID=1:438764839401:web:546a9a44ecbead5be5eb78
      - REACT_APP_FIREBASE_MEASUREMENT_ID=G-618EH8S1KE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - staging-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Load Balancer for High Availability Testing
  nginx-lb:
    image: nginx:alpine
    container_name: nginx-staging-lb
    ports:
      - "8081:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - staging-network

  # Redis for Session Management (staging feature)
  redis:
    image: redis:6-alpine
    container_name: redis-staging
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_staging_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - staging-network

  # Staging Database
  db:
    image: postgres:13-alpine
    container_name: postgres-staging
    environment:
      POSTGRES_DB: staging_pipeline
      POSTGRES_USER: staging_user
      POSTGRES_PASSWORD: staging_secure_password
    ports:
      - "5433:5432"  # Different port for staging
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U staging_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - staging-network

volumes:
  redis_staging_data:
    driver: local
  postgres_staging_data:
    driver: local

networks:
  staging-network:
    driver: bridge
